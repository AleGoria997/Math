#include <algorithm>
#include <array>
#include <bitset>
#include <cstdio>
#include <map>
#include <set>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>
using namespace std;

constexpr int
    V_MAX = 24,
    V_MAX_SQ = V_MAX * V_MAX; 
// V_MAX = 2n, bo przy n ruchach może być maksymalnie 2n wierzchołków
// V_MAX_SQ = rozmiar macierzy sąsiedztwa

typedef bitset<V_MAX_SQ> matrix;
int K, N;

struct interval {
  short l, r;
  interval() {
    l = -10;   // -10 oznacza nieznaną dolną granicę zwycięstwa malarza
    r = 10000; // początkowa górna granica ruchów
  }
};

// słownik zapamiętujących wcześniej analizowane pozycje
unordered_map<matrix, interval> ANAL_POS; 

#define ST first
#define ND second
#define MP make_pair

// maska elementów poniżej głównej przekątnej (czerwone krawędzie)
matrix strictlyLowerTriangularMask() {
  matrix low;
  for (int i = 1; i < V_MAX; ++i)
    for (int j = 0; j < i; ++j)
      low[i * V_MAX + j] = 1;
  return low;
}
const matrix LOWER_MASK = strictlyLowerTriangularMask();

// maska elementów powyżej głównej przekątnej (niebieskie krawędzie)
matrix strictlyUpperTriangularMask() {
  matrix upp;
  for (int i = 0; i < V_MAX; ++i)
    for (int j = i + 1; j < V_MAX; ++j)
      upp[i * V_MAX + j] = 1;
  return upp;
}
const matrix UPPER_MASK = strictlyUpperTriangularMask();

// maski dla każdego wiersza macierzy
const array<matrix, V_MAX> rowMasks() {
  array<matrix, V_MAX> ver;
  ver[0].reset();
  for (int i = 0; i < V_MAX; ++i)
    ver[0][i] = 1;
  for (int i = 1; i < V_MAX; ++i)
    ver[i] = ver[i - 1] << V_MAX;
  return ver;
}
const array<matrix, V_MAX> ROW_MASKS = rowMasks();

// maski dla każdej kolumny macierzy
const array<matrix, V_MAX> columnMasks() {
  array<matrix, V_MAX> ver;
  ver[0].reset();
  for (int i = 0; i < V_MAX; ++i)
    ver[0][i * V_MAX] = 1;
  for (int i = 1; i < V_MAX; ++i)
    ver[i] = ver[i - 1] << 1;
  return ver;
}
const array<matrix, V_MAX> COLUMN_MASKS = columnMasks();

// maski sumowane wierszy/kolejnych kolumn
const array<matrix, V_MAX + 1> sumMasks(array<matrix, V_MAX> masks) {
  array<matrix, V_MAX + 1> ver;
  ver[0].reset();
  for (int i = 0; i < V_MAX; ++i)
    ver[i + 1] = ver[i] | masks[i];
  return ver;
}
const array<matrix, V_MAX + 1> S_ROW_MASKS    = sumMasks(ROW_MASKS),
                               S_COLUMN_MASKS = sumMasks(COLUMN_MASKS);

struct Graph {
  matrix m;   // macierz sąsiedztwa
  int e = 0;  // liczba krawędzi
  int v = 0;  // liczba wierzchołków

  // dodaje niebieską krawędź (v1<v2) lub czerwoną (v1>v2)
  void addEdge(int v1, int v2) {
    m[v1 * V_MAX + v2] = 1;
    ++e;
  }
  void removeEdge(int v1, int v2) {
    m[v1 * V_MAX + v2] = 0;
    --e;
  }

  // wstawia nowy wierzchołek w pozycji w
  void addVertex(int w) {
    // dodanie kolumny
    m = (m & S_COLUMN_MASKS[w]) |
        ((m << 1) & (~S_COLUMN_MASKS[w + 1])); 
    // dodanie wiersza
    m = (m & S_ROW_MASKS[w]) |
        ((m << V_MAX) & (~S_ROW_MASKS[w + 1])); 
    ++v;
  }
  // usuwa wierzchołek w pozycji w
  void removeVertex(int w) {
    // usunięcie kolumny
    m = (m & S_COLUMN_MASKS[w]) |
        ((m >> 1) & (~S_COLUMN_MASKS[w])); 
    // usunięcie wiersza
    m = (m & S_ROW_MASKS[w]) |
        ((m >> V_MAX) & (~S_ROW_MASKS[w])); 
    --v;
  }
  void clear() {
    m.reset();
    v = e = 0;
  }

  // znajduje rozmiar największego uporządkowanego czerwonego skojarzenia
  int matching() {
    auto g = m & LOWER_MASK;
    int i = 0, n = 0;
    while (true) {
      i = g._Find_next(i * V_MAX - 1) / V_MAX;
      if (i >= v) return n;
      ++n;
      g &= ~S_COLUMN_MASKS[i + 1];
    }
  }

  // znajduje długość najdłuższej niebieskiej ścieżki
  int path() {
    auto g = m & UPPER_MASK;
    array<int, V_MAX> l{};
    int x, y, mx = 0;
    #define FOR_BS(i, bset, beg, end) \
      for (int i = (bset)._Find_next((beg)-1); i < end; i = (bset)._Find_next(i))
    FOR_BS(i, g, 0, V_MAX_SQ) {
      x = i / V_MAX; y = i % V_MAX;
      if (l[x] + 1 > l[y]) {
        l[y] = l[x] + 1;
        mx = max(mx, l[x] + 1);
      }
    }
    return mx + 1;
  }

  // znajduje liczbę krawędzi w największym grafie łączącym monotoniczne ścieżki
  int paths() {
    auto g = m & UPPER_MASK;
    array<int, V_MAX> l{};
    int x, y, j = 1, mx = 0;
    #define FOR_BS(i, bset, beg, end) \
      for (int i = (bset)._Find_next((beg)-1); i < end; i = (bset)._Find_next(i))
    FOR_BS(i, g, 0, V_MAX_SQ) {
      x = i / V_MAX; y = i % V_MAX;
      for (; x >= j; ++j)
        l[j] = max(l[j], l[j - 1]);
      if (l[x] + 1 > l[y]) {
        l[y] = l[x] + 1;
        mx = max(mx, l[x] + 1);
      }
    }
    return mx + 1;
  }

  // sprawdza, czy istnieje czerwona krawędź w przedziale [i,j]
  bool redInside(int i, int j) {
    return (m & LOWER_MASK & S_ROW_MASKS[j+1] & ~S_ROW_MASKS[i]
               & S_COLUMN_MASKS[j+1] & ~S_COLUMN_MASKS[i]).any();
  }

  // stopień czerwony wierzchołka i
  int redDegree(int i) {
    return (m & LOWER_MASK & (ROW_MASKS[i] | COLUMN_MASKS[i])).count();
  }
};

// symuluje i wypisuje aktualny graf oraz wyniki matching() i path()
void print(Graph G) {
  #define FOR_BS(i, bset, beg, end) \
    for (int i = (bset)._Find_next((beg)-1); i < end; i = (bset)._Find_next(i))
  FOR_BS(i, G.m, 0, V_MAX_SQ)
    printf("%d %d\n", i / V_MAX, i % V_MAX);
  printf(">>%d %d\n", G.matching(), G.path());
}

// główna funkcja rekurencyjna Konstruktora
bool construct(Graph G, int m) {
  auto &x = ANAL_POS[G.m];
  if (x.l >= m) return false; // już za późno dla konstruktora
  if (x.r <= m) return true;  // już wiadomo, że wygra

  int matching = G.matching(), paths = G.paths();
  if (matching >= K || G.path() >= N) {
    x.r = 0;
    return true;
  }
  if (K - matching + max(N - paths - 1, 0) > m) {
    x.l = K - matching + max(N - paths - 1, 0) - 1;
    return false;
  }
  if (m == 0) {
    x.l = m;
    return false;
  }

  // sprawdzamy wszystkie możliwe ruchy
  for (int i = 0; i <= G.v; ++i)
    for (int j = i; j <= G.v; ++j) {
      // różne warianty wstawienia krawędzi i ewentualnych wierzchołków
      if (i != j && j < G.v && colour(G, m, i, j, 0, 0)) {
        x.r = m; return true;
      }
      if (j < G.v && colour(G, m, i, j, 1, 0)) {
        x.r = m; return true;
      }
      if (i < G.v && colour(G, m, i, j, 0, 1)) {
        x.r = m; return true;
      }
      if (colour(G, m, i, j, 1, 1)) {
        x.r = m; return true;
      }
    }

  x.l = m;
  return false;
}

// główna funkcja Malarza
bool colour(Graph G, int m, int i, int j, bool x, bool y) {
  if (G.v + x + y > V_MAX) return false;

  if (x) { G.addVertex(i); ++j; }
  if (y) { G.addVertex(j); }

  // kara za nierozważny ruch: natychmiastowa wygrana Malarza
  if (G.redInside(i, j)) return false;

  if (G.redDegree(i) == 0 || G.redDegree(j) == 0) {
    G.addEdge(i, j);
    if (!construct(G, m - 1)) return false;
    G.removeEdge(i, j);

    G.addEdge(j, i);
    if (!construct(G, m - 1)) return false;
  } else {
    G.addEdge(j, i);
    if (!construct(G, m - 1)) return false;
    G.removeEdge(j, i);

    G.addEdge(i, j);
    if (!construct(G, m - 1)) return false;
  }

  return true;
}

int main() {
  Graph G;
  K = 6;
  N = 5;

  for (int i = 0; i < 13; ++i) {
    if (construct(G, i))
      printf("r_o(M_%d,P_%d)<=%d\n", K, N, i);
    else
      printf("r_o(M_%d,P_%d)>%d\n", K, N, i);
    printf("Analizowanych pozycji: %d\n", (int)ANAL_POS.size());
  }
}
